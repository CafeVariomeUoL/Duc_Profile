
var UserInfo = [];
var ProfileInfo = [];
var RInfo = [];
var Conditions = [];
var Comments = [];
let newCon =[];
let newRes =[];
let ComuserTerm =[];
let cceTerms = [
  {
    "Term":"Commercial Entity",
    "Des":"Use by an entity in the commercial sector, whether or not that use seeks to make a financial profit.",
  },
  {
    "Term":"Geographical Area",
    "Des":"Use within specified geographic region(s).",
  },
  {
    "Term":"Regulatory Jurisdiction",
    "Des":"Use within an area defined by a shared legal framework, or subject to a common oversight organisation.",
  },
  {
    "Term":"Research Use",
    "Des":"Use for research-related exploration or innovation.",
  },
  {
    "Term":"Clinical Care Use",
    "Des":"Use for patient healthcare and related services.",
  },
  {
    "Term":"Clinical Research Use",
    "Des":"Use for research-related activities that involve human subjects where the intention is to advance medical knowledge.",
  },
  {
    "Term":"Disease Specific Use",
    "Des":"Use for research-related activities pertaining to one or more specific diseases or disease categories.",
  },
  {
    "Term":"Use As Control",
    "Des":"Use as a reference, benchmark or normal control for research or other activities.",
  },
  {
    "Term":"Profit Motivated Use",
    "Des":"Use with the intention of making profit.",
  },
  {
    "Term":"Time Period",
    "Des":"Use that has some time-frame limitation.",
  },
  {
    "Term":"Collaboration",
    "Des":"Use that involves some form of collaboration, typically with the resource provider.",
  },
  {
    "Term":"Fees",
    "Des":"Use that involves payment as a basis for the access or use.",
  },
  {
    "Term":"Return Of Results",
    "Des":"Use that involves a requirement on the recipient to return results that were intentionally generated by the planned use, to the resource provider.",
  },
  {
    "Term":"Return Of Incidental Findings",
    "Des":"Use that involves a requirement on the recipient to return results that were not intentionally generated by the planned use, to the resource provider.",
  },
  {
    "Term":"(Re-)Identification Of Individuals Without Involvement Of The Resource Provider",
    "Des":"Use of records or samples in a resource (provided in a non-identified form) in a manner that identifies or re-identifies one or more individuals, without the involvement of the resource provider.",
  },
  {
    "Term":"(Re-)Identification Of Individuals Mediated By The Resource Provider",
    "Des":"Use of records or samples in a resource (provided in a non-identified form) in a manner that identifies or re-identifies one or more individuals, mediated with the involvement of the resource provider.",
  },
  {
    "Term":"Publication Moratorium",
    "Des":"Use involves a requirement on the recipient to not publish derived results before a specific date, time period, or other condition (such as approval from the supplying institution) has been met.",
  },
  {
    "Term":"Publication",
    "Des":"Use involves a requirement on the recipient to make derived results available to the wider scientific community.",
  },
  {
    "Term":"User Authentication",
    "Des":"Use involves a requirement on the recipient to successfully undertake some form of ID proofing and authentication, prior to the access or use.",
  },
  {
    "Term":"Ethics Approval",
    "Des":"Use involves a requirement on the recipient to evidence suitable ethics board (e.g., IRB/ERB) or other intuitional or oversight body approval.",
  }
];

const icoTerms =[
  {
    "Term":"Geographic location",
    "Des":"A reference to a place on the Earth, by its name or by its geographical location."
},
{
    "Term":"Jurisdiction",
    "Des":"A site within which a deontic power may be realized, where that deontic power inheres in a formally created regulatory body."
},
{
    "Term":"Cancer research investigation",
    "Des":"An investigation that targets cancer research."
},
{
    "Term":"Clinical trial",
    "Des":"An investigation that targets cancer research."
},
{
    "Term":"Drug testing investigation",
    "Des":"An investigation that targets drug testing."
},
{
    "Term":"For-profit research investigation",
    "Des":"An investigation that is conducted with the purpose of earning a profit."
},
{
    "Term":"Human research investigation",
    "Des":"An investigation that involves human research."
},
{
    "Term":"Nonprofit research investigation",
    "Des":"An investigation that is conducted with a nonprofit purpose."
},
{
    "Term":"Looking up a centrally registered identifier",
    "Des":"A planned process in which a request to a CRID registry is made to return the information associated with a CRID symbol."
},
{
    "Term":"Maintaining cell culture",
    "Des":"A protocol application in which cells are kept alive in a defined environment outside of an organism. part of cell_culturing"
},
{
    "Term":"Storage",
    "Des":"A maintenance process by which material entities that are not actively metabolizing are placed in well identified location and possibly under controlled environment in ad-hoc devices/structures in order to preserve and protect them from decay/alteration and maintain availability"
},
{
    "Term":"Agar stab storage",
    "Des":"A storage process with input cell culture and agar and output agar stab for long time storage"
},
{
    "Term":"Freezing storage",
    "Des":"A storage process in temperature that maintenance the frozen status of the stored entities."
},
{
    "Term":"Lyophilization storage",
    "Des":"A storage process with input material entity and output freeze dried material for long time storage."
},
{
    "Term":"Paraffin storage",
    "Des":"A storage process with input organism or anatomical entity and paraffin and output material embedded in paraffin for long term storage"
},
{
  "Term":"Act of genetic testing",
  "Des":"A planned process that involves the investigation of some sequence of DNA."
},
{
  "Term":"Act of selling",
  "Des":"A planned process in which goods or services are exachanged for money."
},
{
  "Term":"Act of act of storing",
  "Des":"A planned process that involves placing a material entity in some location in order to maintain possession of it."
},
{
  "Term":"Data transformation",
  "Des":"A planned process that produces output data from input data."
},
{
  "Term":"Database extract, transform, and load process",
  "Des":"A planned process which takes as input a database and fills another database by extracting concretizations of information entities from the first, transforming them, and loading the transformed concretizations into the second."
},
{
  "Term":"Dataset creating",
  "Des":"A planned process that has a data set as its specified output."
},
{
  "Term":"Maintaining cell culture",
  "Des":"A protocol application in which cells are kept alive in a defined environment outside of an organism. part of cell_culturing"
},

];

const duoTerms =[
  {
    "Term": "Clinical Care Use ",
    "Des": "This data use modifier indicates that use is allowed for clinical use and care."
  },
  {
    "Term": "Publicaiton Moritorium ",
    "Des": "This data use modifier indicates that requestor agrees not to publish results of studies until a specific date."
  },
  {
    "Term": "Publicaiton required",
    "Des": "This data use modifier indicates that requestor agrees to make results of studies using the data available to the larger scientific community."
  },
  {
    "Term": "Returm to database or Resource",
    "Des": "This data use modifier indicates that the requestor must return derived/enriched data to the database/resource."
  },
  {
    "Term": "Time limit on use ",
    "Des": "This data use modifier indicates that use is approved for a specific number of months."
  },
  {
    "Term": "Disease specific research ",
    "Des": "This data use permission indicates that use is allowed provided it is related to the specified disease."
  },
  {
    "Term": "Age catagoury research ",
    "Des": "An investigation concerning specific age categories."
  },
  {
    "Term": "Ancestory Reseaech ",
    "Des": "An investigation concerning ancestry or population origins."
  },
  {
    "Term": "Biomedical Research",
    "Des": "An investigation concerning health, medical, or biomedical research."
  },
  {
    "Term": "Drug development research ",
    "Des": "Biomedical research concerning drug development."
  },
  {
    "Term": "Genetic research ",
    "Des": "Biomedical research concerning genetics (i.e., the study of genes, genetic variations and heredity)."
  },
  {
    "Term": "Gender catagoury research ",
    "Des": "An investigation concerning specific gender categories."
  },
  {
    "Term": "Method development",
    "Des": "An investigation concerning development of methods, algorithms, software or analytical tools."
  },
  {
    "Term": "Population research ",
    "Des": "An investigation concerning a specific population group."
  },
  {
    "Term": "Research Control",
    "Des": "An investigation concerning use of data as reference or control material."
  },
  {
    "Term": "collaboration required",
    "Des": "This data use modifier indicates that the requestor must agree to collaboration with the primary study investigator(s)."
  },
  {
    "Term": "Ethics Approval Required",
    "Des": "This data use modifier indicates that the requestor must provide documentation of local IRB/ERB approval."
  },
  {
    "Term": "general research use",
    "Des": "This data use permission indicates that use is allowed for general research use for any research purpose."
  },
  {
    "Term": "Broad consent rule",
    "Des": "A rule in an informed consent regulatory document that prescribes deontic roles that may be realized in an unspecified range of activities, or which is subject to few restrictions."
  },
  {
    "Term": "Conditional informed consent rule",
    "Des": "A rule in an informed consent regulatory document that prescribes an informed consent process and has part trigger condition description."
  },
  {
    "Term": "Informed consent rule",
    "Des": "A rule in an informed consent regulatory document that prescribes either an informed consent process or deontic roles inhering in agents that participate in an informed consent process."
  },
  {
    "Term": "Secondary use objective specification",
    "Des": "An objective specification that prescribes the participation of an information content entity or a material entity in a process prescirbed by a future invesitgation objective specification."
  },
  {
    "Term": "Specimen collection objective",
    "Des": "A objective specification to obtain a material entity for potential use as an input during an investigation."
  }
];



(function($) {
  $.fn.hasScrollBar = function() {
      return this.get(0).scrollHeight > this.height();
  }
})(jQuery);
 
var adduSum = function () {
  UserInfo.splice(0, UserInfo.length);
  $("#userinfobody").empty();
  var divElem = document.getElementById("userinformation");
  var inputElements = divElem.querySelectorAll("input, select, textarea");
  $.each(inputElements, function () {
    var input = $(this);
    var name = input.parent().find("label").text().slice(0, -1);
    var value = input.val();
    if(value.includes('<script>') || value.includes('</script>') ){
      value = '';
    }
    var item = {};
    if (name && value != "") {
      if (Array.isArray(value)) {
        item["Name"] = name;
        var v = "";
        for (var i = 0; i <= value.length; i++) {
          if (value[i] != undefined) {
            v += value[i] + " ;";
          }
        }
        item["Value"] = v.slice(0, -1);
        UserInfo.push(item);
      } else {
        item["Name"] = name;
        item["Value"] = value;
        UserInfo.push(item);
      }
    } else if (input.prop("required")) {
      $("#userinfobody").append(`
        <tr class="table-danger">
             <td class="text-left "><b>${name}</b></td>
             <td colspan ="5"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
        </tr>
     `);
    }
  });

  // UserInfo = UserInfo.filter((e) => {
  //   return e.Name != "Profile ID";
  // });

  UserInfo.forEach(function (e) {
    $("#userinfobody").append(`
         <tr>
              <td class="text-left "><b>${e.Name}</b></td>
              <td colspan ="5"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">${e.Value}</td>
         </tr>
    `);
  });

};


var addpSum = function () {
  ProfileInfo.splice(0, ProfileInfo.length);
  $("#pinfobody").empty();
  var divElem = document.getElementById("pinformation");
  var inputElements = divElem.querySelectorAll("input, select, textarea");
  $.each(inputElements, function () {
    var input = $(this);
    var name = input.parent().find("label").text().slice(0, -1);
    var value = input.val();

    console.log("Name: "+ name +"||" + "Value: " + value)
    if(value.includes('<script>') || value.includes('</script>') ){
      value = '';
    }
    var item = {};
    if (name && value != "") {
      if (Array.isArray(value)) {
        item["Name"] = name;
        var v = "";
        for (var i = 0; i <= value.length; i++) {
          if (value[i] != undefined) {
            v += value[i] + " ;";
          }
        }
        item["Value"] = v.slice(0, -1);
        ProfileInfo.push(item);
      } else {
        item["Name"] = name;
        item["Value"] = value;
        ProfileInfo.push(item);
      }
    } else if (input.prop("required")) {
      $("#pinfobody").append(`
        <tr class="table-danger">
             <td class="text-left "><b>${name}</b></td>
             <td colspan ="5"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
        </tr>
     `);
    }
  });

  // UserInfo = UserInfo.filter((e) => {
  //   return e.Name != "Profile ID";
  // });



  ProfileInfo.forEach(function (e) {
    $("#pinfobody").append(`
         <tr>
              <td class="text-left "><b>${e.Name}</b></td>
              <td colspan ="5"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">${e.Value}</td>
         </tr>
    `);
  });

  var iditem = {};
  let Id = uuidv4();
  // document.getElementById("p_id").value =Id;
  $('#p_id').val(Id);
  iditem["Name"] = "Id";
  iditem["Value"] = Id;
  ProfileInfo.push(iditem);

  let today = new Date().toISOString().substring(0, 10);
  // document.getElementById("p_date").value=today;
  var dItem = {};

  dItem["Name"] = "Date";
  dItem["Value"] = today;
  ProfileInfo.push(dItem);




};

let uuidv4 = function() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

var addRSum = function(){

  RInfo.splice(0, RInfo.length);
  newRes.splice(0, newRes.length);
  $("#datainfobody").empty();
  var resDiv = document.getElementsByClassName('resgroup');
  $.each(resDiv, (i) =>{
    var info = [];
    var resInfo = resDiv[i].getElementsByClassName('ainfo');
    var inputs = resInfo[0].querySelectorAll("input, select,textarea");
    $.each(inputs, function (i) {

      var input = $(this);
      $(this).closest('span').css("background-color","");
      // var nm = input.attr('name');
      var name = input.parent().find("label").text().slice(0, -1);
      var value = input.val();
      if(value.includes('<script>') || value.includes('</script>') ){
        value = '';
      }
      var item = {};
      if (value != "") {
        if (Array.isArray(value)) {
          item["Name"] = name;
          var v = "";
          for (var i = 0; i <= value.length; i++) {
            if (value[i] != undefined) {
              v += value[i] + " ;";
            }
          }
          item["Value"] = v.slice(0, -1);
          info.push(item);
        } else {
          item["Name"] = name;
          item["Value"] = value;
          info.push(item);
        }
      } 
      
    })

   RInfo.push(info);
  
  })
  console.log(RInfo);

  if(RInfo.length>0){
    var c =1;
    $("#datainfobody").append(`
    <tr>
         <th class="text-center scope="col">Asset No</th>
         <th class="text-center scope="col">Name</th>
         <th colspan="2" class="text-center scope="col">Description</th>
         <th class="text-center scope="col">Refrences</th>
         <th class="text-center scope="col">URI</th>
    </tr>
    `);

    RInfo.forEach(function(x){
      let res = x;
      var Obj = {};
      console.log(res);
      res.forEach(function(i){
        Obj[i.Name] = i.Value;
      })
      newRes.push(Obj);
    })

    var xyz = [];

    newRes.forEach(function(i) {

      var asset_name  = i["Asset Name"]!=undefined?i["Asset Name"]:'';
      var asset_des  = i["Asset Description"]!=undefined?i["Asset Description"]:'';
      var asset_ref  = i["Asset References"]!=undefined?i["Asset References"]:'';
      var asset_uri  = i["Asset Name"]!=undefined?i["Asset Uri"]:'';

      let a_nreq = asset_name == ''?'table-danger':'';

      $("#datainfobody").append(`
      <tr>
      <td colspan="1" class="text-center" style="white-space:wordwrap !imortant; width:50px;">${c}</td>
      <td class="text-left ${a_nreq}" style="white-space:wordwrap !imortant; width:100%;">${asset_name}</td>
      <td colspan="2" class="text-left" style="white-space:wordwrap !imortant; width:50px;">${asset_des}</td>
      <td class="text-left" style="white-space:wordwrap !imortant; width:100%;">${asset_ref}</td>
      <td colspan="1" class="text-left" style="white-space:wordwrap !imortant; width:50px;">${asset_uri}</td>
      </tr>
      `);

      c++;

    })

  }

}

$(document).on("click", ".addorganisation", function () {
  $(this).closest(".r_org").append(` 
  <div class="r_orgroup mb-2">
  <div class="form-row">
    <div class="col-md-5 col-sm-5 col-12"><input type="text" class="form-control" placeholder="Please enter organisation name." name="org_name[]"></div>
    <div class="col-md-5 col-sm-5 col-10"><input type="text" class="form-control" placeholder="Please enter organisation role." name="org_role[]"></div>
    <div class="col-md-2 col-sm-2 col-2"><button type="button" id="removeorg" class="btn btn-small removeorg btn-danger"><i class="fas fa-minus"></i></button></div>
  </div>
  </div>
`);

});
$(document).on("click", ".removeorg", function () {
  $(this).closest(".r_orgroup").remove();
});

var addCSum = function () {

  $('#conditionbody').empty();

  
  Conditions.splice(0, Conditions.length);
  newCon.splice(0, newCon.length);
  var conDiv = document.getElementsByClassName('congroup');

  $.each(conDiv, (i) => {

    var Condition = [];
    var info = [];
    // var scon = [];
    var conInfo = conDiv[i].getElementsByClassName('conInfo');
    // var subc = conDiv[i].getElementsByClassName("subgroup");


    $.each(conInfo, function (x) {

      var inputs = conInfo[x].querySelectorAll("input, select,textarea");

      $.each(inputs, function (i) {

        var input = $(this);
        $(this).closest('span').css("background-color","");
        // var nm = input.attr('name');
        var name = input.parent().find("label").text().slice(0, -1);
        var value = input.val();
        if(value.includes('<script>') || value.includes('</script>') ){
          value = '';
        }
        var item = {};
        if (value != "") {
          if (Array.isArray(value)) {
            item["Name"] = name;
            var v = "";
            for (var i = 0; i <= value.length; i++) {
              if (value[i] != undefined) {
                v += value[i] + " ;";
              }
            }
            item["Value"] = v.slice(0, -1);
            info.push(item);
          } else {
            item["Name"] = name;
            item["Value"] = value;
            info.push(item);
          }
        } 
        // else if (input.prop("required") ) {

        //   $("#conditionbody").append(`

        //   <tr class="table-danger">
        //     <td class="text-left "><b>${name}</b></td>
        //     <td colspan ="5"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
        //   </tr>

        //   `)

        // }
      })

      Condition.push(info);

    });

    
    Conditions.push(Condition);
    

  });



  if (Conditions.length > 0) {

    var c = 1;

    $("#conditionbody").append(`
    <tr>
         <th class="text-center scope="col">Statement No</th>
         <th class="text-center scope="col">Use Condition</th>
         <th class="text-center scope="col">Rule</th>
         <th class="text-center scope="col">Scope</th>
         <th colspan="2" class="text-center  scope="col">Condition Parameter</th>
    </tr>
    `);
      

   
   
    Conditions.forEach(function(x) {
      
      let con = x[0];

      var Obj ={};

      con.forEach(function(i) {

       Obj[i.Name] = i.Value;
        
      })

      newCon.push(Obj);

    })

    
    var xyz = [];

  //   console.log(newCon)
  //   xyz= newCon.sort(function(a, b) {
      
  //     if(a["Use Condition"]!=undefined){
  //       var textA = a["Use Condition"].toUpperCase();
  //       var textB =b["Use Condition"].toUpperCase();
  //       return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
  //     }
  // });

 
  newCon.forEach(function(i) {
  console.log(i)

    var c_term = "";
    if(i["Use Condition"]!=undefined){c_term = i["Use Condition"]}
    if(i["Condition Term"]!=undefined){c_term = i["Condition Term"]}
    // var c_term = i["Use Condition"]!=undefined ?i["Use Condition"]:'';
    var dc_term = i["Use Condition"]!=undefined?i["Use Condition"]:'';
    var c_rule = i["Rule"]!=undefined?i["Rule"]:'';
    var t_detail = i["Condition Parameter"]!=undefined?i["Condition Parameter"]:'';
    var r_scope = i["Scope"]!=undefined?i["Scope"]:'';
    var r_detail = i["Other Considerations"]!=undefined?i["Other Considerations"]:'';
    // var c_app =i["Condition Applicability"];

    let c_treq = c_term==''?'table-danger':'';
    let c_rreq = c_rule==''?'table-danger':'';
    let c_sreq = r_scope==''?'table-danger':'';

    $("#conditionbody").append(`
    <tr>
         <td colspan="1" class="text-center" style="white-space:wordwrap !imortant; width:50px;">${c}</td>
         <td class="text-left ${c_treq}" style="white-space:wordwrap !imortant; width:100%;">${c_term}</td>
         <td class="text-left ${c_rreq}" style="white-space:wordwrap !imortant; width:100%;">${c_rule}</td>
         <td colspan="1" class="text-left ${c_sreq}" style="white-space:wordwrap !imortant; width:50px;">${r_scope}</td>
         <td colspan="2" class="text-left" style="white-space:wordwrap !imortant; width:50px;">${t_detail}</td>

    </tr>
    `);

    c++;
     
   })


  }

};

var addComments = function () {
  Comments.splice(0, Comments.length);

  var tce = $("#tool_comment");
  var tce_Name = tce.parent().find("label").text().slice(0, -1);
  var tce_Value = tce.val();
  var tce_Item = {};
  tce_Item["Name"] = tce_Name;
  tce_Item["Value"] = tce_Value;

  Comments.push(tce_Item);

  // Adding CCE Comment

  var cce = $("#cce_comment");
  var cce_Name = cce.parent().find("label").text().slice(0, -1);
  var cce_Value = cce.val();
  // console.log(cce.value);
  var cce_Item = {};
  cce_Item["Name"] = cce_Name;
  cce_Item["Value"] = cce_Value;

  Comments.push(cce_Item);

}

var getUser = function () {
  return UserInfo;
}
var getJson = function () {

  var DucProfiler = [];
  DucProfiler.splice(0, DucProfiler.length);
  DucProfiler.push(UserInfo);
  DucProfiler.push(ProfileInfo);
  DucProfiler.push(newRes);
  DucProfiler.push(Conditions);
  DucProfiler.push(Comments);

  console.log(DucProfiler);
  return DucProfiler;
}
var validateEmail = function ($email) {
  var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
  return emailReg.test($email);
};
var is_url = function (str) {
  regexp =
    /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
  if (regexp.test(str)) {
    return true;
  } else {
    return false;
  }
};



var Convert_Json = function (x) {

  var JsontoDownload = [];
  _jsontoDownload = {};
  _jsontoDownload["DucProfile"] = x["profile"];
  _jsontoDownload["DucProfile"]["resources"] = x["resource"];
  _jsontoDownload["DucProfile"]["conditions"] = x["Conditions"];
  _jsontoDownload["DucProfile"]["comments"] = x["Comments"];

  JsontoDownload.push(_jsontoDownload);
  var y = JSON.stringify(JsontoDownload, null, 4);

  return y;


}
var J_Download = function (x) {

  var y = JSON.stringify(x, null, 2);
  var fileName = 'Duc_Profiler.json';
  var fileToSave = new Blob([y], {
    type: 'application/json',
    name: fileName
  });
  saveAs(fileToSave, fileName);
}
var xls_Download = function (x) {
  ConvertToCSV(x, "DUC_Profile", true);
}

var ConvertToCSV = function (JSONData, ReportTitle, ShowLabel) {


  var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;
  arrData = arrData["profile"];
  console.log(arrData)

  var createXLSLFormatObj = [];
  var xlsHeader = ["Profile Name","Profile Version","Profile CreateDate", "Last Updated", "Permission Mode","Language","Profile Id","Duc Version", "Assets", "Conditions"];

  createXLSLFormatObj.push(xlsHeader);
  var innerRowData = [];
  for (const [key, value] of Object.entries(arrData)) {




    if (key == "profileName"  || key == "profileVersion" || key == "creationDate" || key == "lastUpdated" || key == "permissionMode" || key == "language"|| key == "profileId" || key == "ducVersion") {

      innerRowData.push(value);
    }

 if (key == "assets"||key == "conditions") {
      var r = '';
      for (const [k, v] of Object.entries(value)) {
        for (var [i, l] of Object.entries(v)) {
          r = r + `${i} - ${l} ;`
        }
        r = r.slice(0, -1);
        r = r + "||";
      }

      r = r.slice(0, -2);

      innerRowData.push(r);
    }

  }

  innerRowData = innerRowData.filter(function (value, index, arr) {

    return arr[index] != 5;
  })
  createXLSLFormatObj.push(innerRowData);


  // console.log(createXLSLFormatObj);

  /* File Name */
  var filename = "Duc_Profiles.xlsx";

  /* Sheet Name */
  var ws_name = "Duc_Profile";

  // if (typeof console !== 'undefined') console.log(new Date());
  var wb = XLSX.utils.book_new(),
    ws = XLSX.utils.aoa_to_sheet(createXLSLFormatObj);

  /* Add worksheet to workbook */
  XLSX.utils.book_append_sheet(wb, ws, ws_name);

  /* Write workbook and Download */
  XLSX.writeFile(wb, filename);
}

var IsJsonString = function (str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }
  return true;
}
var library = {};

library.json = {
  replacer: function (match, pIndent, pKey, pVal, pEnd) {
    var key = '<span class=json-key>';
    var val = '<span class=json-value>';
    var str = '<span class=json-string>';
    var r = pIndent || '';
    if (pKey)
      r = r + key + pKey.replace(/[": ]/g, '') + '</span>: ';
    if (pVal)
      r = r + (pVal[0] == '"' ? str : val) + pVal + '</span>';
    return r + (pEnd || '');
  },
  prettyPrint: function (obj) {
    var jsonLine = /^( *)("[\w]+": )?("[^"]*"|[\w.+-]*)?([,[{])?$/mg;
    return JSON.stringify(obj, null, 3)
      .replace(/&/g, '&amp;').replace(/\\"/g, '&quot;')
      .replace(/</g, '&lt;').replace(/>/g, '&gt;')
      .replace(jsonLine, library.json.replacer);
  }
};

var convertToJson = function( content ){
  let Obj = content[0][0];
  console.log(Obj);
  let newJson = {};
  newJson["profile"] = {};

  for (const [r, rv] of Object.entries(Obj)) {

    if(r=="Assets"){
      newJson["profile"]["assets"] = formateArrayEntries(rv);
    }else 
    if(r == "Conditions"){
      newJson["profile"]["conditions"] = formateArrayEntries(rv);
    }
    else{  
      name = formateProfile(r);
      newJson["profile"][name] = rv;
    }

  }
  return JSON.stringify(newJson, null, 2); 
}
var formateProfile = function(k){
  let name = "";
  switch (k) {
    case "Profile Name":
      name = "profileName"
      break;
    case "Profile Version":
      name = "profileVersion"
      break;
    case "Profile Id":
      name = "profileId"
      break;
    case "Profile CreateDate":
      name = "creationDate"
      break; 
    case "Permission Mode":
      name = "permissionMode"
      break; 
    case "Duc Version":
      name = "ducVersion"
      break; 
    case "Language":
      name = "language"
      break; 
    case "Last Updated":
      name = "lastUpdated"
      break;
    default:
      name = k;
      break;
  }

  return name;

}

var formateArrayEntries = function(v){

  let newArr = [];
  let subArr;

  // First check if more than one item in array
  if(v.includes('||')){
  subArr = v.split("||");
  subArr.forEach(function(v){
    newArr.push(myObj(v));
  })
  }else{
    newArr.push(myObj(v));
  }

  return newArr;

}
var myObj = function(string){
  let retObj = {};
  let newArr = string.split(";").map(function(item){
    return item.trim();
  });
  console.log(newArr)
  newArr.forEach(function(v){
    let Value = v.split("-").map(function(item){
      return item.trim();
    })
    if(Value[0] == "assetReferences"){
      let refArr = Value[1].split(",").map(function(k){
        return k.trim();
       });
     retObj["assetReferences"]= refArr;
    }
    if(Value[0] == "assetURI"){
      // if(Value.length>2){
      //   retObj["assetURI"]= Value[1]+":"+Value[2];
      // }else{
        retObj["assetURI"]= Value[1];
      // }
      
    }
    else{
      retObj[Value[0]]= Value[1];
    }
  })

  return retObj;

}
var alterJson = function (json) {

  var d = JSON.parse(json);
  let [first] = Object.keys(d)

  if (first == "profile") {
    // alert("old JSON ")

    return json;
  } else if (first == "DucProfile") {
    var j = [];
    var jitem = {};

    var pitem = {};
    // alert("I am here")
    // console.log(d.DucProfile.profileName);

    pitem["profileName"] = d.DucProfile.profileName;
    if (d.DucProfile.profileVersion) {
      pitem["profileVersion"] = d.DucProfile.profileVersion;
    }
    pitem["profileID"] = d.DucProfile.profileId;
    pitem["profileCreateDate"] = d.DucProfile.creationDate;


    jitem["profile"] = pitem;
    jitem["resources"] = d.DucProfile.resources;
    jitem["conditions"] = d.DucProfile.conditions;
    jitem["comments"] = d.DucProfile.comments;

    j.push(jitem);
    var k = JSON.stringify(j[0], null, 2);

    return k;

  }


}
$(document).ready(function () {
  $("#adduser").click(function () {
    $(this).prop('disabled', true);
    $('#usr').append(`
      <div class="form-row mt-3 p-0">
      <button type="button" id="removeUser" class="  closebtn  mr-2 btn btn-small removeCon btn-danger"><i
      class="fas fa-times"></i></button>
      <div class="form-group col-md-12 col-12 col-12">
      <label for="u_email">Email:<small class="text-danger"><i class="fas fa-star fa-xs"></i></small></label>
      <input type="email" class="form-control" value="" required name="u_email" id="u_email" placeholder="Please enter email">
      </div>
      </div>
      <div class="form-row mt-1 p-0">
      <div class="form-group col-md-6 col-6 col-12">
      <label for="u_fname">First Name:</label>
      <input type="text" class="form-control" value="" name="u_fname" id="u_fname" placeholder="Please enter first name">
      </div>
      <div class="form-group col-md-6 col-6 col-12">
      <label for="u_lname">Last Name:</label>
      <input type="text" class="form-control" value="" name="u_lname" id="u_lname" placeholder="Please enter last name">
      </div>
      </div>
      </div>
    `)
    
  })
  
  $(document).on('click','#removeUser',function(){
    $("#adduser").prop('disabled', false);
    $("#usr").empty();
  })
})



